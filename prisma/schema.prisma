// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  hashedPassword String      @map("hashed_password")
  role           String
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at")
  devices        Device[]
  token          UserToken[]

  @@map("users")
}

model Device {
  id          String    @id @default(cuid())
  fingerprint String
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  sessions    Session[]

  @@unique([fingerprint, userId])
  @@map("devices")
}

model Session {
  id                 String     @id @default(cuid())
  hashedAccessToken  String     @map("hashed_access_token")
  hashedRefreshToken String     @map("hashed_refresh_token")
  deviceId           String     @map("device_id")
  device             Device     @relation(fields: [deviceId], references: [id])
  isActive           Boolean    @default(true) @map("is_active")
  expiresAt          DateTime   @map("expires_at")
  loggedOutAt        DateTime?  @map("logged_out_at")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @default(now()) @updatedAt @map("updated_at")
  orderLogs          OrderLog[]

  @@map("sessions")
}

model UserToken {
  id            String   @id @default(uuid()) @db.VarChar(50)
  userId        String   @map("user_id") @db.VarChar(50)
  type          String
  status        String
  encryptedCode String   @map("encrypted_code") @db.Text
  expiresAt     DateTime @map("expires_at") @db.Timestamp
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tokens")
}

model Order {
  id            String     @id @default(cuid())
  status        String
  image         String     @map("image")
  description   String
  salePrice     Decimal    @map("sale_price") @db.Decimal(10, 2)
  receivedPrice Decimal    @map("received_price") @db.Decimal(10, 2)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at")
  orderLogs     OrderLog[]

  @@map("orders")
}

model OrderLog {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id") @db.VarChar(50)
  sessionId   String   @map("session_id") @db.VarChar(50)
  session     Session  @relation(fields: [sessionId], references: [id])
  beforeState String   @map("before_state")
  afterState  String   @map("after_state")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_logs")
}
